syntax = "proto3";

option java_package = "com.group6.logsystem.grpc";
option java_outer_classname = "LogProto";
option java_multiple_files = true;

package logsystem;

service LogService {
  // Log operations
  rpc sendLog (LogRequest) returns (LogResponse);
  rpc queryLogs (QueryRequest) returns (LogList);

  // Raft consensus operations
  rpc requestVote (RequestVoteRequest) returns (RequestVoteResponse);
  rpc appendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
}

// =====================
// Logging-related messages
// =====================

message LogRequest {
  string nodeId = 1;
  string message = 2;
  int64 timestamp = 3;
  int32 term = 4;
  string logId = 5;
}

message LogResponse {
  bool success = 1;
  string message = 2;
}

message QueryRequest {
  string nodeId = 1;
  int64 startTime = 2;
  int64 endTime = 3;
}

message LogEntry {
  int32 index = 1;
  string nodeId = 2;
  string message = 3;
  int64 timestamp = 4;
  int32 term = 5;
  string logId = 6;
}

message LogList {
  repeated LogEntry logs = 1;
}

// =====================
// Raft consensus messages
// =====================

message RequestVoteRequest {
  string candidateId = 1;  // Candidate’s ID
  int32 term = 2;          // Candidate’s term
  int32 lastLogIndex = 3;  // Index of candidate’s last log entry
  int32 lastLogTerm = 4;   // Term of candidate’s last log entry
}

message RequestVoteResponse {
  int32 term = 1;          // Current term (for candidate to update itself)
  bool voteGranted = 2;    // True means candidate received vote
}

message AppendEntriesRequest {
  string leaderId = 1;      // Leader’s ID
  int32 term = 2;           // Leader’s term
  int32 prevLogIndex = 3;   // Index of log entry immediately preceding new ones
  int32 prevLogTerm = 4;    // Term of prevLogIndex entry
  repeated LogEntry entries = 5; // Log entries to store (empty for heartbeat)
  int32 leaderCommit = 6;   // Leader’s commitIndex
}

message AppendEntriesResponse {
  int32 term = 1;          // Current term (for leader to update itself)
  bool success = 2;        // True if follower contained entry matching prevLogIndex and prevLogTerm
}